name: CI/CD to AWS ECS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - b1

jobs:
  deploy:
    name: Build & Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🐳 Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🔨 Install dependencies and build Admin UI
        run: |
          npm install
          npm install -g @angular/cli
          cd admin-ui
          npm install
          npm run build

      - name: 📥 Install DockerSlim (official script)
        run: |
          curl -sL https://raw.githubusercontent.com/slimtoolkit/slim/master/scripts/install-slim.sh | sudo -E bash -
          docker-slim --version

      - name: 📦 Build, slim, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE_TAG=${{ github.sha }}
      
          # Build raw image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:raw-$IMAGE_TAG .
      
          # Slim the image, and explicitly keep `node`
          docker-slim build \
            --http-probe=false \
            --include-bin node \
            --include-path /app/dist/index.js \
            --exec "node dist/index.js" \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --target $ECR_REGISTRY/$ECR_REPOSITORY:raw-$IMAGE_TAG

      
          # Push slimmed image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 📋 Download and sanitize ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --output json > full-task-def.json
          cat full-task-def.json | jq '.taskDefinition |
            {
              family,
              containerDefinitions,
              executionRoleArn,
              taskRoleArn,
              networkMode,
              volumes,
              placementConstraints,
              requiresCompatibilities,
              cpu,
              memory
            }' > task-def.json

      - name: 📝 Update container image in task definition
        run: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
          jq --arg IMAGE "$IMAGE" '.containerDefinitions[0].image = $IMAGE' task-def.json > task-def-updated.json

      - name: 🚀 Register new ECS task definition
        id: register-task
        run: |
          TASK_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://task-def-updated.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition_arn=$TASK_REVISION" >> $GITHUB_OUTPUT

      - name: 🔁 Update ECS service with new task
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task.outputs.task_definition_arn }}
